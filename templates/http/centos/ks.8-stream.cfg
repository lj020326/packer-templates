cdrom
lang en_US.UTF-8

## Keyboard layouts
keyboard us

## Network information
## ref: https://www.golinuxcloud.com/wp-content/uploads/2020/04/Red_Hat_CentOS_8_Kickstart_Example.txt
network --bootproto=dhcp --noipv6 --onboot=on --device=eth0
network --hostname=centos8

## Root password
## ref: https://thornelabs.net/posts/hash-roots-password-in-rhel-and-centos-kickstart-profiles.html
## openssl passwd -1 "password here"
## OR
## python3 -c 'import crypt; print(crypt.crypt("password here", crypt.mksalt(crypt.METHOD_SHA512)))'
rootpw --iscrypted $6$rounds=656000$jF.sJku8iq0nuuvL$cWrlWodRmbO5zAy6Y4FZYkYf2FI93Ou8ce1pv/UFJ3WHIJqntLk7HOtEGSohCWvU1Fp/cdjTg/ckWj2TWV5Nv0

## Create packer user
user --name=packer --groups=wheel --iscrypted --uid=300 --gid=300 --password=$6$rounds=656000$jF.sJku8iq0nuuvL$3phypuBaMg0WE1dNMGSIhWEJK66Cn5JeLnjjCdhN8L6F1jSP7PGjS2T/KzjMZwa7f4TJAWc8xoWfjBE2NroMi/

## Use graphical install
text

## Do not configure the X Window System
skipx

## System services
services --enabled="chronyd"

firewall --disabled
selinux --permissive

## System timezone
timezone UTC

bootloader --timeout=1 --location=mbr --append="net.ifnames=0 biosdevname=0"

## Partition clearing information
zerombr
clearpart --all --initlabel
##ignoredisk --only-use=sda

## Disk partitioning information
#autopart --nohome --nolvm --noboot
autopart --nolvm

## Run the Setup Agent on first boot
firstboot --disabled
reboot --eject

#%packages --ignoremissing --excludedocs --instLangs=en_US.utf8
%packages --excludedocs --instLangs=en_US.utf8
# vagrant needs this to copy initial files via scp
###
###
-fprintd-pam
-intltool
-iwl*-firmware
-microcode_ctl
%end

# Post
%post
exec < /dev/tty3 > /dev/tty3
chvt 3
(
echo
echo "################################"
echo "# Running Post Configuration   #"
echo "################################"
echo
echo 'Defaults:packer !requiretty' > /etc/sudoers.d/packer
echo '%packer ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/packer
chmod 440 /etc/sudoers.d/packer

dnf -y update
dnf install -y epel-release
dnf install -y perl redhat-lsb-core
dnf install -y \
    open-vm-tools \
    sudo \
    openssh-clients \
    selinux-policy-devel \
    nfs-utils \
    cifs-utils \
    net-tools \
    dnf-utils \
    network-scripts \
    vim \
    wget \
    curl \
    rsync \
    git

### ref: https://stackoverflow.com/questions/22073516/failed-to-install-python-cryptography-package-with-pip-and-setup-py
### dependencies for pip install cryptography:
dnf install -y \
    libffi-devel \
    openssl-devel

dnf install -y \
    python3 \
    python3-pip \
    python3-libselinux \
    python3-virtualenv \
    python3-netaddr \
    python3-cryptography

# Enable hyper-v daemons only if using hyper-v virtualization
if [ $(virt-what) == "hyperv" ]; then
    dnf install -y hyperv-daemons
    systemctl enable hypervvssd
    systemctl enable hypervkvpd
fi
dnf clean all

# Since we disable consistent network naming, we need to make sure the eth0
# configuration file is in place so it will come up.
# Delete other network configuration first because RHEL/C7 networking will not
# restart successfully if there are configuration files for devices that do not
# exist.
rm -f /etc/sysconfig/network-scripts/ifcfg-e*
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << _EOF_
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=dhcp
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=eth0
DEVICE=eth0
ONBOOT=yes
_EOF_

) 2>&1 | /usr/bin/tee /var/log/post_install.log
chvt 1

%end
