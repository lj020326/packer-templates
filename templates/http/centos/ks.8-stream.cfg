cdrom
lang en_US.UTF-8
keyboard us
network --bootproto=dhcp --noipv6 --onboot=on --device=eth0
rootpw --iscrypted $6$rounds=656000$jF.sJku8iq0nuuvL$cWrlWodRmbO5zAy6Y4FZYkYf2FI93Ou8ce1pv/UFJ3WHIJqntLk7HOtEGSohCWvU1Fp/cdjTg/ckWj2TWV5Nv0
firewall --disabled
selinux --permissive
timezone UTC
bootloader --timeout=1 --location=mbr --append="net.ifnames=0 biosdevname=0"
text
skipx
zerombr
clearpart --all --initlabel
autopart --nohome --nolvm --noboot
firstboot --disabled
user --name=packer --groups=wheel --password=$1$cmNa//Ke$0oV9p.gyEYq6jDgqAcDxy/ --iscrypted --uid=900 --gid=900
reboot --eject

repo --name="centos-updates" --mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=BaseOS --cost=1000
repo --name="appstream-updates" --mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=AppStream --cost=1000
repo --name="extras-updates" --mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=Extras --cost=1000

#%packages --ignoremissing --excludedocs --instLangs=en_US.utf8
%packages --excludedocs --instLangs=en_US.utf8
open-vm-tools
openssh-clients
sudo
selinux-policy-devel
wget
nfs-utils
net-tools
tar
bzip2
#deltarpm
rsync
git
dnf-utils
redhat-lsb-core
elfutils-libelf-devel
network-scripts
-fprintd-pam
-intltool
-iwl*-firmware
-microcode_ctl
jq
python3
python3-pip
python3-libselinux
python3-virtualenv
## ref: https://stackoverflow.com/questions/22073516/failed-to-install-python-cryptography-package-with-pip-and-setup-py
## dependencies for pip install cryptography:
libffi-devel
openssl-devel
%end

%post
# sudo
echo 'Defaults:packer !requiretty' > /etc/sudoers.d/packer
echo "packer        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers.d/packer
chmod 440 /etc/sudoers.d/packer

# Enable hyper-v daemons only if using hyper-v virtualization
if [ $(virt-what) == "hyperv" ]; then
    dnf -y install hyperv-daemons cifs-utils
    systemctl enable hypervvssd
    systemctl enable hypervkvpd
fi

# Since we disable consistent network naming, we need to make sure the eth0
# configuration file is in place so it will come up.
# Delete other network configuration first because RHEL/C7 networking will not
# restart successfully if there are configuration files for devices that do not
# exist.
rm -f /etc/sysconfig/network-scripts/ifcfg-e*
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << _EOF_
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=dhcp
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=eth0
DEVICE=eth0
ONBOOT=yes
_EOF_
%end
